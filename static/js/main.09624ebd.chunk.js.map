{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAGaA,EAAO,SAACC,GAAD,OACpB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAI,cAAcC,IAAG,+BAA2BH,EAAMI,QAAQC,GAAzC,4BAC1B,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCHaC,EAAW,SAAAR,GACrB,OAAO,qBAAKC,UAAY,YAAjB,SACDD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAwBA,QAAWA,GAAvBA,EAAQC,UCH/CM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACCZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC6BAG,E,kDAhCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IALJ,E,qDASb,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAASc,S,oBAGzC,WAAU,IAAD,SACyBE,KAAKR,MAA9BR,EADA,EACAA,SAAUS,EADV,EACUA,YACXQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBACpG,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WACxD,cAAC,EAAD,CAAUvB,SAAUiB,W,GAzBVO,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.09624ebd.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n<div className = 'card-container'>\n<img alt='robo photos' src ={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n<h2> {props.monster.name} </h2>\n<p> {props.monster.email} </p>\n</div>\n)\n","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = props => {\n   return <div className = 'card-list' >\n        {props.monsters.map(monster => (<Card key ={monster.id} monster = {monster} /> ))}\n        </div>;\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n     className='search'\n     type='search'\n     placeholder={placeholder}\n     onChange={handleChange} />\n\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component'\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '' \n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n        placeholder='Search Monsters' \n        handleChange={e => this.setState({searchField: e.target.value}) } />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}